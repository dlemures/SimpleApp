package com.example.simpleapp.viewmodel

import com.example.simpleapp.action.Action
import com.example.simpleapp.model.EndOfListReached
import com.example.simpleapp.model.Event
import com.example.simpleapp.model.ScreenLoad
import com.example.simpleapp.model.ViewState
import com.example.simpleapp.usecase.fetchMoreCatFacts
import com.example.simpleapp.usecase.loadSCreen
import io.reactivex.Observable

internal fun Observable<Event>.eventToActions(): Observable<out Action> = publish { o ->
    Observable.merge( // The actions are generated by useCases
        o.ofType(ScreenLoad::class.java).loadSCreen(),
        o.ofType(EndOfListReached::class.java).fetchMoreCatFacts()
    )
}

internal fun Observable<out Action>.actionToViewState(): Observable<ViewState> {
    return scan(ViewState()) { currentState, action ->
        action.perform(currentState)
    }.skip(1).distinctUntilChanged()
}
